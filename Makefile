# A sample Makefile for building Google Test and using it in user
# tests.  Please tweak it to suit your environment and project.  You
# may want to move it to your project's root directory.
#
# SYNOPSIS:
#
#   make [all]  - makes everything.
#   make TARGET - makes the given target.
#   make clean  - removes all files generated by make.

# Please tweak the following variable definitions as needed by your
# project, except GTEST_HEADERS, which you can use in your own targets
# but shouldn't modify.

# Points to the root of Google Test, relative to where this file is.
# Remember to tweak this if you move this file.
GTEST_DIR = .

SRC_EXT = cc
HDR_EXT = h
OBJ_EXT = o

UNITTEST_SUFFIX = unittest

# Where to find user code.
USER_DIR = ./src
INC_DIR = ./include
LIB_DIR = ./lib/$(shell uname -s)
BIN_DIR = ./bin
BUILD_DIR = ./build

# Flags passed to the preprocessor.
# Set Google Test's header directory as a system directory, such that
# the compiler doesn't generate warnings in Google Test headers.
CPPFLAGS += -isystem $(GTEST_DIR)/include

# Flags passed to the C++ compiler.
CXXFLAGS += -g -Wall -Wextra

ASSIGNMENT = helloworld

ASSIGNMENT_SRC = $(USER_DIR)/$(ASSIGNMENT).$(SRC_EXT)
ASSIGNMENT_HDR = $(INC_DIR)/$(ASSIGNMENT).$(HDR_EXT)
ASSIGNMENT_OBJ = $(BUILD_DIR)/$(ASSIGNMENT).$(OBJ_EXT)
ASSIGNMENT_BIN = $(BIN_DIR)/$(ASSIGNMENT)

TEST_SRC = $(USER_DIR)/$(ASSIGNMENT)_$(UNITTEST_SUFFIX).$(SRC_EXT)
TEST_OBJ = $(BUILD_DIR)/$(ASSIGNMENT)_$(UNITTEST_SUFFIX).$(OBJ_EXT)
TEST_BIN = $(BIN_DIR)/$(ASSIGNMENT)_$(UNITTEST_SUFFIX)

# All tests produced by this Makefile.  Remember to add new tests you
# created to the list.
TESTS = $(TEST_BIN)

# All Google Test headers.  Usually you shouldn't change this
# definition.
GTEST_HEADERS = $(GTEST_DIR)/include/gtest/*.h \
                $(GTEST_DIR)/include/gtest/internal/*.h

# House-keeping build targets.

all : $(TESTS) $(ASSIGNMENT_BIN)

clean :
	rm -rf $(TESTS) output/ $(BIN_DIR) $(BUILD_DIR)

# Builds gtest.a and gtest_main.a.

# Builds a sample test.  A test should link with either gtest.a or
# gtest_main.a, depending on whether it defines its own main()
# function.

$(ASSIGNMENT_BIN) : $(ASSIGNMENT_OBJ) | bin build
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) $< -o $@

assignment : $(ASSIGNMENT_BIN)

run : $(ASSIGNMENT_BIN)
	@$(ASSIGNMENT_BIN)

$(ASSIGNMENT_OBJ) : $(ASSIGNMENT_SRC) $(ASSIGNMENT_HDR) $(GTEST_HEADERS) | build
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $< -o $@

$(TEST_OBJ) : $(TEST_SRC) $(ASSIGNMENT_HEADER) $(GTEST_HEADERS) | build
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $< -o $@

$(TEST_BIN) : $(ASSIGNMENT_OBJ) $(TEST_OBJ) | bin build
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -e__Z9test_mainiPPc -lpthread -lgtests -L$(LIB_DIR) $^ -o $@

tester : $(TEST_BIN)

test : $(TEST_BIN)
	@$(TEST_BIN)

run_jenkins_tester : $(BIN_DIR)/$(ASSIGNMENT)_unittest
	@$(TEST_BIN) --gtest_output=xml:output/result.xml

bin:
	-mkdir $(BIN_DIR) &2>/dev/null

build:
	-mkdir $(BUILD_DIR) &2>/dev/null
	
.PHONY : assignment tester run test

